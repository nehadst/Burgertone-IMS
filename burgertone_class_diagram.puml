@startuml Burgertone IMS Class Diagram

skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classBackgroundColor #f8f9fa
skinparam classBorderColor #495057
skinparam packageBackgroundColor #e9ecef

title Burgertone Inventory Management System - Class Diagram

package "Data Collection" {
  class TouchBistroScraper {
    - logger: Logger
    - storage_client: StorageClient
    - bucket: Bucket
    - driver: WebDriver
    - base_url: String
    - wait: WebDriverWait
    + __init__(gcs_bucket_name, credentials_path)
    + login(username, password)
    + download_report(date)
    + upload_to_gcs(download_url, date)
    + download_all_reports(start_date, end_date)
    + close()
    + validate_csv(file_path)
    + test_gcs_connection()
  }
  
  class Scheduler {
    - config: Config
    + schedule_job(job, interval)
    + run_daily_collection()
    + run_weekly_analysis()
  }
}

package "Data Storage" {
  class Database {
    - connection: Connection
    - config: Config
    + connect()
    + disconnect()
    + execute_query(query)
    + import_csv(file_path)
    + get_sales_data(start_date, end_date)
    + get_inventory_data(product_id)
  }
  
  class CloudStorage {
    - client: StorageClient
    - bucket: Bucket
    + upload_file(source_path, destination_path)
    + download_file(source_path, destination_path)
    + list_files(prefix)
    + delete_file(path)
  }
}

package "Analysis" {
  class SalesAnalyzer {
    - db: Database
    + analyze_sales_trends(start_date, end_date)
    + calculate_revenue(start_date, end_date)
    + identify_top_products(limit)
    + generate_sales_report(start_date, end_date)
  }
  
  class InventoryPredictor {
    - db: Database
    - sales_analyzer: SalesAnalyzer
    - model: PredictionModel
    + train_model(historical_data)
    + predict_inventory_needs(days_ahead)
    + generate_reorder_recommendations()
    + optimize_stock_levels()
  }
  
  class PredictionModel {
    - algorithm: String
    - parameters: Dict
    - trained: Boolean
    + train(X, y)
    + predict(X)
    + evaluate(X_test, y_test)
    + save_model(path)
    + load_model(path)
  }
}

package "User Interface" {
  class WebApp {
    - server: Server
    - routes: List
    + start()
    + stop()
    + register_routes()
  }
  
  class DashboardController {
    - sales_analyzer: SalesAnalyzer
    - inventory_predictor: InventoryPredictor
    + get_sales_dashboard()
    + get_inventory_dashboard()
    + get_prediction_dashboard()
  }
  
  class APIController {
    - db: Database
    + get_sales(start_date, end_date)
    + get_inventory(product_id)
    + get_predictions(days_ahead)
  }
}

' Relationships
TouchBistroScraper --> CloudStorage: uploads data to
Scheduler --> TouchBistroScraper: triggers
Database --> CloudStorage: retrieves data from
SalesAnalyzer --> Database: queries
InventoryPredictor --> Database: queries
InventoryPredictor --> SalesAnalyzer: uses
InventoryPredictor --> PredictionModel: uses
WebApp --> DashboardController: routes to
WebApp --> APIController: routes to
DashboardController --> SalesAnalyzer: uses
DashboardController --> InventoryPredictor: uses
APIController --> Database: queries

@enduml 